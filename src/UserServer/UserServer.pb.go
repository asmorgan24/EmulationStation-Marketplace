// Code generated by protoc-gen-go.
// source: UserServer/UserServer.proto
// DO NOT EDIT!

/*
Package userserver is a generated protocol buffer package.

It is generated from these files:
	UserServer/UserServer.proto

It has these top-level messages:
	UserQuery
	UsernameAvailable
	LoginRequest
	LoginReply
	RegisterRequest
	RegisterStatus
*/
package userserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request query containing the user's name.
type UserQuery struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *UserQuery) Reset()                    { *m = UserQuery{} }
func (m *UserQuery) String() string            { return proto.CompactTextString(m) }
func (*UserQuery) ProtoMessage()               {}
func (*UserQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserQuery) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// The response message containing whether the username exists
type UsernameAvailable struct {
	Exists bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
}

func (m *UsernameAvailable) Reset()                    { *m = UsernameAvailable{} }
func (m *UsernameAvailable) String() string            { return proto.CompactTextString(m) }
func (*UsernameAvailable) ProtoMessage()               {}
func (*UsernameAvailable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UsernameAvailable) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

// The request message containing the username and password
type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// The reponse message containing the login sucess status
type LoginReply struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// The request message containing the username and password
type RegisterRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	FistName string `protobuf:"bytes,4,opt,name=fistName" json:"fistName,omitempty"`
	LastName string `protobuf:"bytes,5,opt,name=lastName" json:"lastName,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RegisterRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegisterRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterRequest) GetFistName() string {
	if m != nil {
		return m.FistName
	}
	return ""
}

func (m *RegisterRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

// The reponse message containing the login sucess status
type RegisterStatus struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *RegisterStatus) Reset()                    { *m = RegisterStatus{} }
func (m *RegisterStatus) String() string            { return proto.CompactTextString(m) }
func (*RegisterStatus) ProtoMessage()               {}
func (*RegisterStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RegisterStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*UserQuery)(nil), "userserver.UserQuery")
	proto.RegisterType((*UsernameAvailable)(nil), "userserver.UsernameAvailable")
	proto.RegisterType((*LoginRequest)(nil), "userserver.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "userserver.LoginReply")
	proto.RegisterType((*RegisterRequest)(nil), "userserver.RegisterRequest")
	proto.RegisterType((*RegisterStatus)(nil), "userserver.RegisterStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserServer service

type UserServerClient interface {
	// Sends a check for username in use
	CheckUserExists(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*UsernameAvailable, error)
	UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterStatus, error)
}

type userServerClient struct {
	cc *grpc.ClientConn
}

func NewUserServerClient(cc *grpc.ClientConn) UserServerClient {
	return &userServerClient{cc}
}

func (c *userServerClient) CheckUserExists(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*UsernameAvailable, error) {
	out := new(UsernameAvailable)
	err := grpc.Invoke(ctx, "/userserver.UserServer/CheckUserExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/userserver.UserServer/UserLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterStatus, error) {
	out := new(RegisterStatus)
	err := grpc.Invoke(ctx, "/userserver.UserServer/RegisterUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserServer service

type UserServerServer interface {
	// Sends a check for username in use
	CheckUserExists(context.Context, *UserQuery) (*UsernameAvailable, error)
	UserLogin(context.Context, *LoginRequest) (*LoginReply, error)
	RegisterUser(context.Context, *RegisterRequest) (*RegisterStatus, error)
}

func RegisterUserServerServer(s *grpc.Server, srv UserServerServer) {
	s.RegisterService(&_UserServer_serviceDesc, srv)
}

func _UserServer_CheckUserExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).CheckUserExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userserver.UserServer/CheckUserExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).CheckUserExists(ctx, req.(*UserQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userserver.UserServer/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userserver.UserServer/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).RegisterUser(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userserver.UserServer",
	HandlerType: (*UserServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserExists",
			Handler:    _UserServer_CheckUserExists_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserServer_UserLogin_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _UserServer_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "UserServer/UserServer.proto",
}

func init() { proto.RegisterFile("UserServer/UserServer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x92, 0xf1, 0x4a, 0xfb, 0x30,
	0x10, 0xc7, 0xd7, 0xdf, 0xcf, 0x8d, 0xed, 0x18, 0x8e, 0x05, 0x1d, 0xa5, 0x43, 0x90, 0x20, 0x3a,
	0x10, 0x2a, 0xe8, 0x03, 0x88, 0x13, 0x85, 0x81, 0xc8, 0xec, 0xd8, 0x03, 0x64, 0x7a, 0x6e, 0xc1,
	0x6c, 0xad, 0x49, 0x3a, 0xdd, 0x93, 0xf8, 0x80, 0xbe, 0x88, 0x24, 0x69, 0xd7, 0x3a, 0xa6, 0xff,
	0xf8, 0x5f, 0xbe, 0xf7, 0xb9, 0xdc, 0xe5, 0xee, 0x1b, 0xe8, 0x8e, 0x15, 0xca, 0x11, 0xca, 0x25,
	0xca, 0xb3, 0xe2, 0x18, 0x26, 0x32, 0xd6, 0x31, 0x81, 0x54, 0xa1, 0x54, 0x36, 0x42, 0x4f, 0xa0,
	0x61, 0xf8, 0x43, 0x8a, 0x72, 0x45, 0x02, 0xa8, 0x1b, 0xb4, 0x60, 0x73, 0xf4, 0xbd, 0x43, 0xaf,
	0xd7, 0x88, 0xd6, 0x9a, 0x9e, 0x42, 0x7b, 0x9c, 0x9d, 0xaf, 0x96, 0x8c, 0x0b, 0x36, 0x11, 0x48,
	0x3a, 0x50, 0xc3, 0x77, 0xae, 0xb4, 0xb2, 0xe9, 0xf5, 0x28, 0x53, 0xf4, 0x16, 0x9a, 0x77, 0xf1,
	0x94, 0x2f, 0x22, 0x7c, 0x4d, 0x51, 0xe9, 0xdf, 0x0a, 0x1b, 0x96, 0x30, 0xa5, 0xde, 0x62, 0xf9,
	0xe4, 0xff, 0x73, 0x2c, 0xd7, 0xf4, 0x08, 0x20, 0xab, 0x93, 0x88, 0x95, 0xe9, 0xa6, 0x34, 0xd3,
	0xa9, 0xeb, 0x56, 0x8d, 0x32, 0x45, 0x3f, 0x3c, 0x68, 0x45, 0x38, 0xe5, 0x4a, 0xa3, 0xfc, 0x63,
	0x47, 0xb2, 0x07, 0x55, 0x9c, 0x33, 0x2e, 0xfc, 0xff, 0x16, 0x38, 0x61, 0x6e, 0x3c, 0x73, 0xa5,
	0xef, 0x4d, 0xb5, 0x1d, 0x77, 0x23, 0xd7, 0x86, 0x09, 0x96, 0xb1, 0xaa, 0x63, 0xb9, 0xa6, 0x3d,
	0xd8, 0xcd, 0x1f, 0x36, 0xb2, 0x6f, 0xfd, 0x69, 0x86, 0xf3, 0x4f, 0x0f, 0xa0, 0x30, 0x8a, 0x0c,
	0xa0, 0x75, 0x3d, 0xc3, 0xc7, 0x17, 0x13, 0xba, 0xb1, 0x3b, 0x25, 0xfb, 0x61, 0x61, 0x5b, 0xb8,
	0xf6, 0x2c, 0x38, 0xd8, 0x0c, 0x7f, 0x73, 0x88, 0x56, 0xc8, 0xa5, 0x73, 0xd8, 0xee, 0x91, 0xf8,
	0xe5, 0xec, 0xb2, 0x45, 0x41, 0x67, 0x0b, 0x49, 0xc4, 0x8a, 0x56, 0xc8, 0x00, 0x9a, 0xf9, 0x10,
	0xa6, 0x10, 0xe9, 0x96, 0x33, 0x37, 0xf6, 0x1e, 0x04, 0xdb, 0xa0, 0x9b, 0x9d, 0x56, 0xfa, 0xc7,
	0xd0, 0x9e, 0xc5, 0x72, 0xca, 0x16, 0x61, 0x31, 0x6b, 0xbf, 0x55, 0x9c, 0x87, 0xe6, 0x7f, 0x0e,
	0xbd, 0x49, 0xcd, 0x7e, 0xd4, 0x8b, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xdc, 0xf0, 0xdb,
	0xc7, 0x02, 0x00, 0x00,
}
